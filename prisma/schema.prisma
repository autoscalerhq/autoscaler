// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// ---------------------
// Config
// ---------------------

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing", "metrics"]
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#String
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Organization {
  id       String    @id @default(cuid()) @db.VarChar(30) @map("_id")
  projects Project[]
  name     String?
}

model Project {
  id             String        @id @default(cuid()) @db.VarChar(30) @map("_id")
  name           String?
  organizationId String?
  environments   Environment[]
  Organization   Organization? @relation(fields: [organizationId], references: [id])

  @@unique([organizationId])
}

model Environment {
  id        String   @id @default(cuid()) @db.VarChar(30) @map("_id")
  name      String?
  systems   System[]
  projectId String?
  Project   Project? @relation(fields: [projectId], references: [id])

  @@unique([projectId])
}

model System {
  id                         String                @id @default(cuid()) @db.VarChar(30) @map("_id")
  name                       String?
  environmentId              String?
  Environment                Environment?          @relation(fields: [environmentId], references: [id])
  Ingestor                   Ingestor[]
  Scaler                     Scaler[]
  Processor                  Processor[]
  SourceSystemConnection     SystemConnection[]    @relation("Source")
  ProcessingSystemConnection SystemConnection[]    @relation("Processing")
  Analytic                   Analytic[]
  Notifcation                Notifcation[]
  ProcessingAlgorithm        ProcessingAlgorithm[]

  @@unique([environmentId])
}

// Pre processing
model Ingestor {
  id       String  @id @default(cuid()) @db.VarChar(30) @map("_id")
  key      String  @default(cuid())
  name     String?
  system   System  @relation(fields: [systemId], references: [id])
  systemId String

  @@index([systemId])
}

// Post processing
model Scaler {
  id       String  @id @default(cuid()) @db.VarChar(30) @map("_id")
  name     String?
  system   System  @relation(fields: [systemId], references: [id])
  systemId String

  @@index([systemId])
}

// Processing
model Processor {
  id       String  @id @default(cuid()) @db.VarChar(30) @map("_id")
  name     String?
  system   System  @relation(fields: [systemId], references: [id])
  systemId String

  @@index([systemId])
}

// Post processing
model Analytic {
  id       String  @id @default(cuid()) @db.VarChar(30) @map("_id")
  name     String?
  system   System  @relation(fields: [systemId], references: [id])
  systemId String

  @@index([systemId])
}

// Post processing
model Notifcation {
  id       String  @id @default(cuid()) @db.VarChar(30) @map("_id")
  name     String?
  system   System  @relation(fields: [systemId], references: [id])
  systemId String

  @@index([systemId])
}

// Pre processing
model SystemConnection {
  name               String?
  SourceSystem       System  @relation("Source", fields: [SourceSystemId], references: [id])
  SourceSystemId     String
  ProcessingSystem   System  @relation("Processing", fields: [ProcessingsystemId], references: [id])
  ProcessingsystemId String

  @@id([ProcessingsystemId, SourceSystemId])
}

// Processing
model ProcessingAlgorithm {
  id       String  @id @default(cuid()) @db.VarChar(30) @map("_id")
  name     String?
  system   System  @relation(fields: [systemId], references: [id])
  systemId String

  @@index([systemId])
}
